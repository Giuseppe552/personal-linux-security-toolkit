"""
Report Module

Improved reporting:
- Uses 'rich' for colored terminal output.
- Saves report to 'security_report.md' in Markdown format.
- Includes section headings, spacing, and a summary.

Author: Giuseppe552
"""

from rich.console import Console
from rich.markdown import Markdown
from datetime import datetime

def generate_report(scan_data, network_data):
    # Compose Markdown report for file output
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    md_lines = [
        f"# Personal Linux Security Toolkit Report",
        f"**Generated:** {now}\n",
    ]

    if scan_data:
        md_lines.append("## System Scan Results")
        suspicious = scan_data['suspicious_processes'] or ['None found']
        writable = scan_data['world_writable_files'] or ['None found']
        sudoers = scan_data['sudo_users'] or ['None found']
        md_lines.append(f"**Suspicious processes:**\n- " + "\n- ".join(suspicious))
        md_lines.append(f"\n**World-writable files:**\n- " + "\n- ".join(writable))
        md_lines.append(f"\n**Sudo users:**\n- " + "\n- ".join(sudoers))
    else:
        md_lines.append("## System Scan Results\nNo scan data available.")

    if network_data:
        md_lines.append("\n## Network Inspection Results")
        md_lines.append("**Open ports:**\n```text\n" + network_data['open_ports'] + "\n```")
        md_lines.append("**Interfaces:**\n```text\n" + network_data['interfaces'] + "\n```")
        suspicious_conns = network_data['suspicious_connections'] or ['None found']
        md_lines.append("**Suspicious connections:**\n- " + "\n- ".join(suspicious_conns))
    else:
        md_lines.append("\n## Network Inspection Results\nNo network data available.")

    md_lines.append(f"\n---\n*End of report. Generated by Personal Linux Security Toolkit.*")

    # Write Markdown report to file
    md_report = "\n".join(md_lines)
    with open("security_report.md", "w") as f:
        f.write(md_report)

    # Rich output for terminal
    console = Console()
    console.rule("[bold blue]Personal Linux Security Toolkit Report")
    console.print(f"[green]Generated:[/] {now}\n")

    if scan_data:
        console.rule("[bold magenta]System Scan Results")
        console.print(f"[bold yellow]Suspicious processes:[/]\n", "\n".join(scan_data['suspicious_processes']) or "None found")
        console.print(f"\n[bold yellow]World-writable files:[/]\n", "\n".join(scan_data['world_writable_files']) or "None found")
        console.print(f"\n[bold yellow]Sudo users:[/]\n", ", ".join(scan_data['sudo_users']) or "None found")
    else:
        console.print("[bold magenta]System Scan Results[/]\nNo scan data available.")

    if network_data:
        console.rule("[bold cyan]Network Inspection Results")
        console.print(f"[bold yellow]Open ports:[/]\n")
        console.print(Markdown(f"```text\n{network_data['open_ports']}\n```"))
        console.print(f"[bold yellow]Interfaces:[/]\n")
        console.print(Markdown(f"```text\n{network_data['interfaces']}\n```"))
        console.print(f"[bold yellow]Suspicious connections:[/]\n", "\n".join(network_data['suspicious_connections']) or "None found")
    else:
        console.print("[bold cyan]Network Inspection Results[/]\nNo network data available.")

    console.rule("[bold green]End of Report")
    console.print("[bold green]Report saved as [italic]security_report.md[/italic][/bold green]")

    # For toolkit.py to print or use as needed
    return md_report
